# This is the configuration file for PlatformIO, a cross-platform tool and IDE
# to build and develop software for embedded systems.
#
# To build the firmware with PlatformIO, install PlatformIO Core (CLI, no GUI):
# - https://docs.platformio.org/en/latest//core/installation.html
#
# For documentation on this file, see:
# - https://docs.platformio.org/en/latest/projectconf/index.html
#
# To add support for another STM32F1xx board, add a new [env:name..] section
# with the appropriate `board` and (optionally) `board_build.ldscript`.
# For a list of supported hardware, see:
# - https://docs.platformio.org/en/latest/platforms/ststm32.html
#
# To add support for additional grblHAL plugins or drivers, make the necessary
# changes to the common.build_flags, common.lib_deps and common.lib_extra_dirs
# below.
#
# By default this file sets the preprocessor directive `OVERRIDE_MY_MACHINE`
# to ignore all settings in `Inc/my_machine.h`.  Instead, you should edit this
# file and add the necessary directives (e.g. `-D FOOBAR_ENABLE`) to either
# `common.build_flags` or the environment specific `build_flags`.
#
# Typical command line usage:
#
#    # Build firmware for all defined environments
#    pio run
#    # Build only for specific environments with the -e option
#    pio run -e BTT_SKR_MINI_E3_V20 -e BTT_SKR_MINI_E3_V20_USB
#    # List the freshly built firmware ELF (.elf) and binary (.bin) files:
#    ls -l .pio/build/*/firmware.*
#    # If the target supports uploading (via `upload_protocol`):
#    pio run -e bluepill_f103c8_128k -t upload
#    # Clean up build related resources
#    pio run -t clean
#
[platformio]
include_dir = Inc
src_dir = Src

[common]
build_flags =
  -I .
  -I FatFs
  -I Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc
  -I Middlewares/ST/STM32_USB_Device_Library/Core/Inc
  -I USB_DEVICE/Target
  -I boards
  -D _USE_IOCTL=1
  -D _USE_WRITE=1
  -D _VOLUMES=1  

  # tmc defintions and includes

  # Ignore all settings in Inc/my_machine.h (and instead use the below build flags)
  -D OVERRIDE_MY_MACHINE
  # Uncomment to enable debug builds
  # -D DEBUG
  # Uncomment to enable support for keypad
  #-D KEYPAD_ENABLE=1
  # Uncomment to enable support for odometer
  #-D ODOMETER_ENABLE=1
  # Uncomment to enable support for running G-code from the microSD card
  # You also need to uncomment FatFS and sdcard in lib_deps (see below)
  #-D SDCARD_ENABLE=1
  # Set to 1 or 2 (see Inc/my_machine.h)
  #-D SPINDLE_HUANYANG=1
  -D BOARD_LONGBOARD32=1
  -D SLB_EEPROM_ENABLE=1
#  -D SIENCI_LASER_PWM=1
  -D SDCARD_ENABLE=2
  -D FTP_ENABLE=1
  -D WEBSOCKET_ENABLE=1
  -D TELNET_ENABLE=1
  #-D WEBDAV_ENABLE=1
  -D NETWORK_IPMODE=0
  -D _WIZCHIP_=5500
  -D USE_SPI_DMA=1
  -D MACROS_ENABLE=1
  -D N_MACROS=3
  -D SAFETY_DOOR_ENABLE=1  
  # See Inc/my_machine.h for options
  -D HSE_VALUE=25000000 
  #-D MEM_NUM_PBUF=24
  #-D MEM_NUM_TCP_PCB=8
  #-D PBUF_POOL_SIZE=12      
  -D MINIMIZE_PROBE_OVERSHOOT=1 
  -D NVS_SIZE=16384    
  -D STEP_PULSE_LATENCY=1.3
  -D Y_GANGED=1
  #-D Y_AUTO_SQUARE=1
  -D USB_SERIAL_CDC=1
  -D MODBUS_ENABLE=3
  -D N_SPINDLE=8
  -D SPINDLE0_ENABLE=-1
  -D DEFAULT_SPINDLE=4
  -D DEFAULT_SPINDLE1=11
  #-D MPG_ENABLE=1
  #-D KEYPAD_ENABLE=1
  #-D CANBUS_ENABLE=1
  #-D BOOT_ENTRY_ENABLE=1 # not needed, part of driver.c
  -D ESTOP_ENABLE=1
  -D DEFAULT_NO_UNLOCK_AFTER_ESTOP=1
  -D SLB_TLS_AUX_INPUT=3
  -D N_AXIS=4

  # Floating point support for printf, required for WebUI v3
  -Wl,-u,_printf_float
  -I lwip/src/include
  -I networking/wiznet
lib_deps =
  boards
  bluetooth
  grbl
  keypad
  laser
  motors
  odometer
  trinamic
  lwip
  macros
  switchbank
  plugins
  networking
  FatFs
  sdcard
  spindle
  #rgb
  probing
  eeprom
  webui
  # USB serial support
  Core
  Class
  App
  Target
lib_extra_dirs =
  .
  FatFs
  Middlewares/ST/STM32_USB_Device_Library
  USB_DEVICE

[env]
platform = ststm32
platform_packages = framework-stm32cubef4 @ ~1.26.2
framework = stm32cube
# Do not produce .a files for lib deps (which would prevent them from overriding weak symbols)
lib_archive = no
lib_ldf_mode = off
extra_scripts = 
    pre:extra_script.py
    post:extra_script.py
grblhal_driver_version = B5.0.11
#build_flags = ${common.build_flags}



[env:f412vg_SLB]
board = genericSTM32F412VG
custom_prog_version = SLB
custom_board_name = 'default'
; change microcontroller
board_build.mcu = stm32f412vgt6
board_build.ldscript = STM32F412VGTX_FLASH.ld
build_flags = ${common.build_flags}
  
  #'-D BOARD_NAME="SuperLongBoard"'
  #-D WEBUI_ENABLE=1 
  #-D LWIP_HTTPD_DYNAMIC_HEADERS=1
  -D NGC_EXPRESSIONS_ENABLE=1
  -D NGC_PARAMETERS_ENABLE=1
  -D BOARD_NAME='"${custom_board_name}"'
  -D DEFAULT_STEP_PULSE_MICROSECONDS=5
  -D DEFAULT_STEPPER_IDLE_LOCK_TIME=254
  -D DEFAULT_DIR_SIGNALS_INVERT_MASK=6
  -D DEFAULT_ENABLE_SIGNALS_INVERT_MASK=15
  -D DEFAULT_STEPPER_DEENERGIZE_MASK=0

  -D STATUS_LIGHT_ENABLE=1 #note this needs to be disabled for debugging to work.
  
  -D DEFAULT_LIMIT_SIGNALS_INVERT_MASK=15
  -D DEFAULT_PROBE_SIGNAL_INVERT=1
  -D DEFAULT_TLS_SIGNAL_INVERT=1
  -D DEFAULT_CONTROL_SIGNALS_INVERT_MASK=14 
  #-D DEFAULT_CONTROL_SIGNALS_INVERT_MASK=79
  -D DEFAULT_PLANNER_BUFFER_BLOCKS=128
  -D DEFAULT_RESET_OVERRIDES=1

  -D DEFAULT_HOMING_SINGLE_AXIS_COMMANDS=1
  -D DEFAULT_HOMING_INIT_LOCK=1
  #-D DEFAULT_HOMING_FORCE_SET_ORIGIN=1
  -D DEFAULT_HOMING_OVERRIDE_LOCKS=1
  -D DEFAULT_HOMING_DIR_MASK=11
  -D DEFAULT_HOMING_FEED_RATE=150
  -D DEFAULT_HOMING_SEEK_RATE=4300
  -D DEFAULT_HOMING_DEBOUNCE_DELAY=25
  -D DEFAULT_HOMING_PULLOFF=1.5

  -D DEFAULT_PARKING_ENABLE=1  

  -D DEFAULT_JOG_LIMIT_ENABLE=1

  -D DEFAULT_INVERT_SPINDLE_ENABLE_PIN=0
  -D DEFAULT_INVERT_SPINDLE_CCW_PIN=0
  -D DEFAULT_INVERT_SPINDLE_PWM_PIN=0
  -D DEFAULT_SPINDLE_RPM_MAX=24000
  -D DEFAULT_SPINDLE_RPM_MIN=7200
  -D DEFAULT_LASER_MODE=0
  -D DEFAULT_SPINDLE_PWM_FREQ=1000
  -D SLB_DEFAULT_SPINDLE=0

  -D DEFAULT_DOOR_IGNORE_WHEN_IDLE=1
  -D DEFAULT_DOOR_KEEP_COOLANT_ON=1
  
  -D TRINAMIC_EXTENDED_SETTINGS=1
  -D TRINAMIC_SPI_ENABLE=1
  -D TRINAMIC_SPI_PORT=2
  -D TRINAMIC_ENABLE=2660
  -D TRINAMIC_MIXED_DRIVERS=1
  #-D TMC_POLL_STALLED=1
  -D DYNAMIC_STST=1
  -D TMC_X_ENABLE=1
  -D TMC_Y_ENABLE=1
  -D TMC_Z_ENABLE=1
  -D TRINAMIC_DEFAULT_MICROSTEPS=32
  -D MAXIMUM_STEPPER_CURRENT_2660=2800
  -D DEFAULT_X_CURRENT=2800
  -D DEFAULT_Y_CURRENT=2800
  -D DEFAULT_Z_CURRENT=2800
  -D TMC_X_HOLD_CURRENT_PCT=35
  -D TMC_Y_HOLD_CURRENT_PCT=35
  -D TMC_Z_HOLD_CURRENT_PCT=35
  -D DEFAULT_X_MAX_TRAVEL=810
  -D DEFAULT_Y_MAX_TRAVEL=855
  -D DEFAULT_Z_MAX_TRAVEL=120
  -D DEFAULT_A_MAX_TRAVEL=0
  -D DEFAULT_X_ACCELERATION=1000
  -D DEFAULT_Y_ACCELERATION=1000
  -D DEFAULT_Z_ACCELERATION=750
  -D DEFAULT_A_ACCELERATION=1000
  -D DEFAULT_X_MAX_RATE=5500
  -D DEFAULT_Y_MAX_RATE=5500
  -D DEFAULT_Z_MAX_RATE=4500
  -D DEFAULT_A_MAX_RATE=8000
  -D DEFAULT_X_STEPS_PER_MM=800
  -D DEFAULT_Y_STEPS_PER_MM=800
  -D DEFAULT_Z_STEPS_PER_MM=800
  -D DEFAULT_A_STEPS_PER_MM=19.75308642
  -D DEFAULT_AXIS_ROTATIONAL_MASK=8 #Needs to be a bitmask for A axis.
  -D ROTARY_FIX=1
  -D STATUS_LIGHT_ENABLE=0
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink
debug_tool = stlink





[env:f412vg_SLB_EXT]
board = genericSTM32F412VG
custom_prog_version = SLB_EXT
custom_board_name = 'default'
; change microcontroller
board_build.mcu = stm32f412vgt6
board_build.ldscript = STM32F412VGTX_FLASH.ld
build_flags = ${common.build_flags}
  
  #'-D BOARD_NAME="SuperLongBoard"'
  -D BOARD_NAME='"${custom_board_name}"'

  -D NGC_EXPRESSIONS_ENABLE=1
  -D ENABLE_BACKLASH_COMPENSATION=1

  -D DEFAULT_STEP_PULSE_MICROSECONDS=5
  -D DEFAULT_STEPPER_IDLE_LOCK_TIME=255
  -D DEFAULT_DIR_SIGNALS_INVERT_MASK=6
  -D DEFAULT_ENABLE_SIGNALS_INVERT_MASK=0
  -D DEFAULT_STEPPER_DEENERGIZE_MASK=0

#  -D STATUS_LIGHT_ENABLE=1 #note this needs to be disabled for debugging to work.
  
  -D DEFAULT_LIMIT_SIGNALS_INVERT_MASK=15
  -D DEFAULT_SOFT_LIMIT_ENABLE=1
  -D DEFAULT_HARD_LIMIT_ENABLE=1
  -D DEFAULT_PROBE_SIGNAL_INVERT=1
  -D DEFAULT_TLS_SIGNAL_INVERT=1
  -D DEFAULT_CONTROL_SIGNALS_INVERT_MASK=14 
  #-D DEFAULT_CONTROL_SIGNALS_INVERT_MASK=79
  -D DEFAULT_PLANNER_BUFFER_BLOCKS=128
  -D DEFAULT_RESET_OVERRIDES=1

  -D DEFAULT_HOMING_ENABLE=1
  -D DEFAULT_HOMING_SINGLE_AXIS_COMMANDS=1
  -D DEFAULT_HOMING_INIT_LOCK=1
  -D DEFAULT_HOMING_FORCE_SET_ORIGIN=1
  -D DEFAULT_HOMING_OVERRIDE_LOCKS=1
  -D DEFAULT_HOMING_DIR_MASK=1
  -D DEFAULT_HOMING_FEED_RATE=150
  -D DEFAULT_HOMING_SEEK_RATE=4300
  -D DEFAULT_HOMING_DEBOUNCE_DELAY=25
  -D DEFAULT_HOMING_PULLOFF=1.5

  -D DEFAULT_PARKING_ENABLE=0  

  -D DEFAULT_JOG_LIMIT_ENABLE=1

  -D DEFAULT_INVERT_SPINDLE_ENABLE_PIN=0
  -D DEFAULT_INVERT_SPINDLE_CCW_PIN=0
  -D DEFAULT_INVERT_SPINDLE_PWM_PIN=0
  -D DEFAULT_SPINDLE_RPM_MAX=24000
  -D DEFAULT_SPINDLE_RPM_MIN=7500
  -D DEFAULT_LASER_MODE=0
  -D DEFAULT_SPINDLE_PWM_FREQ=1000
  -D DEFAULT_SPINDLE_AT_SPEED_TOLERANCE=5
  -D DEFAULT_SAFETY_DOOR_SPINDLE_DELAY=11
  -D SLB_DEFAULT_SPINDLE=0
#  -D SLB_DEFAULT_VFD_ADDRESS=2
  -D VFD_ADDRESS=2

  -D DEFAULT_DOOR_IGNORE_WHEN_IDLE=1
  -D DEFAULT_DOOR_KEEP_COOLANT_ON=1
  
  -D SLB_MOTOR_ALARM=1
  #-D SLB_MOTOR_ALARM_IRQ=1
  -D SLB_MOTOR_ALARM_POLLED=1
  
  -D DEFAULT_X_MAX_TRAVEL=1260
  -D DEFAULT_Y_MAX_TRAVEL=1248
  -D DEFAULT_Z_MAX_TRAVEL=170
  -D DEFAULT_A_MAX_TRAVEL=0
  -D DEFAULT_X_ACCELERATION=1500
  -D DEFAULT_Y_ACCELERATION=1500
  -D DEFAULT_Z_ACCELERATION=1500
  -D DEFAULT_A_ACCELERATION=1000
  -D DEFAULT_X_MAX_RATE=15000
  -D DEFAULT_Y_MAX_RATE=15000
  -D DEFAULT_Z_MAX_RATE=6000
  -D DEFAULT_A_MAX_RATE=8000
  -D DEFAULT_X_STEPS_PER_MM=320
  -D DEFAULT_Y_STEPS_PER_MM=320
  -D DEFAULT_Z_STEPS_PER_MM=200
  -D DEFAULT_A_STEPS_PER_MM=19.75308642
  -D DEFAULT_AXIS_ROTATIONAL_MASK=8 #Needs to be a bitmask for A axis.
  -D ROTARY_FIX=1
  -D Y_GANGED=1
  -D Y_AUTO_SQUARE=1  
  -D STATUS_LIGHT_ENABLE=0
lib_deps = ${common.lib_deps}
  eeprom
lib_extra_dirs = ${common.lib_extra_dirs}
# Alternatively, place the .pio/build/<env name>/firmware.bin on the NODE_F4xxRE drive
upload_protocol = stlink
debug_tool = stlink